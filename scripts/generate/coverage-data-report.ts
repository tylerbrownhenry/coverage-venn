import * as fs from "fs"; import * as path from "path"; console.log("Starting coverage data report generation"); const COVERAGE_DIR = path.resolve(process.cwd(), "../../coverage"); const COVERAGE_ANALYSIS_DIR = path.resolve(process.cwd(), "../../coverage-analysis"); const OUTPUT_DIR = path.resolve(process.cwd(), "../../coverage-project"); const COVERAGE_SOURCE = process.env.COVERAGE_SOURCE || "standard"; const COMPONENT_COVERAGE_PATH = COVERAGE_SOURCE === "project" ? path.resolve(COVERAGE_ANALYSIS_DIR, "project-component-coverage.json") : path.resolve(COVERAGE_DIR, "component-coverage.json"); const HTML_OUTPUT_PATH = path.resolve(OUTPUT_DIR, "coverage-data-report.html"); try { if (!fs.existsSync(OUTPUT_DIR)) { fs.mkdirSync(OUTPUT_DIR, { recursive: true }); } console.log(`Loading component coverage from: ${COMPONENT_COVERAGE_PATH}`); if (!fs.existsSync(COMPONENT_COVERAGE_PATH)) { throw new Error(`Component coverage file not found at: ${COMPONENT_COVERAGE_PATH}`); } const componentCoverage: any[] = JSON.parse(fs.readFileSync(COMPONENT_COVERAGE_PATH, "utf8")); console.log(`Found ${componentCoverage.length} components`); const html = `<!DOCTYPE html><html><head><title>Coverage Data Report</title></head><body><h1>Coverage Data Report</h1><p>Generated at: ${new Date().toISOString()}</p><p>Components: ${componentCoverage.length}</p><ul>${componentCoverage.map((c: any) => `<li>${c.name || path.basename(c.path)} - Coverage: ${(c.coverage * 100).toFixed(1)}%</li>`).join("")}</ul></body></html>`; fs.writeFileSync(HTML_OUTPUT_PATH, html); console.log(`Report written to: ${HTML_OUTPUT_PATH}`); } catch (error) { console.error("Error generating report:", error); }
