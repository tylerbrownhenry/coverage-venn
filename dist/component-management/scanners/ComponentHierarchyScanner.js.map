{
  "version": 3,
  "sources": ["../../../src/component-management/scanners/ComponentHierarchyScanner.ts"],
  "sourcesContent": ["import { parse } from '@babel/parser';\nimport traverse, { NodePath } from '@babel/traverse';\nimport * as t from '@babel/types';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { TestIdValidator, ValidationError } from '../validators/index';\nimport { getConfig } from '../../core/config';\n\nexport interface ComponentNode {\n  name: string;\n  path: string;\n  children: string[];\n  parents: string[];\n  imports: string[];\n  testIds: string[];\n}\n\ninterface ScannerConfig {\n  includes: string[];\n  excludes: string[];\n  maxDepth: number;\n}\n\nconst DEFAULT_CONFIG: ScannerConfig = {\n  includes: ['**/*.tsx', '**/*.ts'],\n  excludes: ['**/*.test.*', '**/*.spec.*'],\n  maxDepth: 3\n};\n\nexport class ComponentHierarchyScanner {\n  private componentMap: Map<string, ComponentNode>;\n  private validator: TestIdValidator;\n  private config: ScannerConfig;\n\n  constructor() {\n    this.componentMap = new Map();\n    this.validator = new TestIdValidator();\n    \n    try {\n      const loadedConfig = getConfig('scanner', {\n        required: false,\n        configPath: process.env.SCANNER_CONFIG_PATH\n      });\n      \n      this.config = {\n        ...DEFAULT_CONFIG,\n        ...loadedConfig\n      };\n    } catch (error) {\n      console.warn('Failed to load scanner config, using defaults:', error);\n      this.config = DEFAULT_CONFIG;\n    }\n    \n    console.log('Scanner config:', this.config);\n  }\n\n  async scanDirectory(rootDir: string): Promise<Map<string, ComponentNode>> {\n    const files = await this.findComponentFiles(rootDir);\n    console.log('files:', files);\n    for (const file of files) {\n      await this.analyzeComponent(file);\n    }\n\n    await this.buildRelationships();\n    return this.componentMap;\n  }\n\n  private async findComponentFiles(dir: string, depth = 0): Promise<string[]> {\n    console.log('Scanning directory:', dir);\n    if (this.config.maxDepth > 0 && depth >= this.config.maxDepth) {\n      return [];\n    }\n\n    const files: string[] = [];\n    const entries = await fs.readdir(dir, { withFileTypes: true });\n    console.log('Found entries:', entries.map(e => ({ name: e.name, isDir: e.isDirectory() })));\n\n    for (const entry of entries) {\n      const fullPath = path.join(dir, entry.name);\n      if (entry.isDirectory()) {\n        console.log('Entering directory:', fullPath);\n        files.push(...await this.findComponentFiles(fullPath, depth + 1));\n      } else {\n        console.log('Checking file:', fullPath);\n        const isComponent = this.isComponentFile(entry.name);\n        console.log('Is component file?', isComponent, entry.name);\n        if (isComponent) {\n          console.log('Adding component file:', fullPath);\n          files.push(fullPath);\n        }\n      }\n    }\n\n    return files;\n  }\n\n  private isComponentFile(filename: string): boolean {\n    const matchesInclude = this.config.includes.some(pattern => {\n      const globPattern = pattern\n        .replace(/\\*\\*/g, '.*')\n        .replace(/\\*/g, '[^/]*')\n        .replace(/\\./g, '\\\\.');\n      const regex = new RegExp(globPattern);\n      const matches = regex.test(filename);\n      console.log('Testing include pattern:', pattern, 'against:', filename, 'Result:', matches);\n      return matches;\n    });\n\n    const matchesExclude = this.config.excludes.some(pattern => {\n      const globPattern = pattern\n        .replace(/\\*\\*/g, '.*')\n        .replace(/\\*/g, '[^/]*')\n        .replace(/\\./g, '\\\\.');\n      const regex = new RegExp(globPattern);\n      const matches = regex.test(filename);\n      console.log('Testing exclude pattern:', pattern, 'against:', filename, 'Result:', matches);\n      return matches;\n    });\n\n    return matchesInclude && !matchesExclude;\n  }\n\n  private async analyzeComponent(filePath: string): Promise<void> {\n    const content = await fs.readFile(filePath, 'utf-8');\n    const ast = parse(content, {\n      sourceType: 'module',\n      plugins: ['typescript', 'jsx']\n    });\n\n    // Update to preserve case of component name\n    const componentName = path.basename(filePath, path.extname(filePath))\n      .replace(/^[a-z]/, c => c.toUpperCase()); // Capitalize first letter\n\n    const componentNode: ComponentNode = {\n      name: componentName,\n      path: filePath,\n      children: [],\n      parents: [],\n      imports: [],\n      testIds: []\n    };\n\n    traverse(ast, {\n      ImportDeclaration: (path: NodePath<t.ImportDeclaration>) => {\n        componentNode.imports.push(path.node.source.value);\n      },\n      JSXIdentifier: (path: NodePath<t.JSXIdentifier>) => {\n        if (this.isCustomComponent(path.node.name)) {\n          componentNode.children.push(path.node.name);\n        }\n      },\n      JSXAttribute: (path: NodePath<t.JSXAttribute>) => {\n        if (path.node.name.name === 'data-testid' && t.isStringLiteral(path.node.value)) {\n          const testId = path.node.value.value;\n          const validationResult = this.validator.validate(testId, componentNode);\n          if (!validationResult.isValid) {\n            validationResult.errors.forEach((error: ValidationError) => {\n              console.error(`Invalid test ID \"${testId}\": ${error.message}`);\n              console.error(`Suggestion: ${error.suggestion}`);\n            });\n          }\n          componentNode.testIds.push(testId);\n        }\n      }\n    });\n\n    this.componentMap.set(componentNode.name, componentNode);\n  }\n\n  private async buildRelationships(): Promise<void> {\n    for (const [name, component] of this.componentMap.entries()) {\n      for (const childName of component.children) {\n        const childComponent = this.componentMap.get(childName);\n        if (childComponent) {\n          childComponent.parents.push(name);\n        }\n      }\n    }\n  }\n\n  private isCustomComponent(name: string): boolean {\n    return /^[A-Z]/.test(name);\n  }\n}\n"],
  "mappings": "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",
  "names": ["traverse", "path"]
}
