{
  "version": 3,
  "sources": ["../../../../src/component-management/managers/__tests__/component-manager.test.ts"],
  "sourcesContent": ["import { ComponentHierarchyManager, ComponentNode } from '../component-manager';\nimport { ComponentHierarchyScanner } from '../../scanners/ComponentHierarchyScanner';\nimport { HashTrackingManager } from '../HashTrackingManager';\nimport { BrowserStackManager } from '../../../coverage/services/BrowserStackManager';\nimport { TagManager } from '../../../shared/tags/TagManager';\nimport { CoverageReportGenerator } from '../../../coverage/reporters/coverage';\nimport { getConfig } from '../../../core/config';\n\n// Mocks\njest.mock('../../scanners/ComponentHierarchyScanner');\njest.mock('../HashTrackingManager');\njest.mock('../../../coverage/services/BrowserStackManager');\njest.mock('../../../shared/tags/TagManager');\njest.mock('../../../coverage/reporters/coverage');\njest.mock('../../../core/config');\n\ndescribe('ComponentHierarchyManager', () => {\n  let manager: ComponentHierarchyManager;\n  let mockScanner: jest.Mocked<ComponentHierarchyScanner>;\n  let mockHashTracker: jest.Mocked<HashTrackingManager>;\n  let mockBrowserStackManager: jest.Mocked<BrowserStackManager>;\n  let mockTagManager: jest.Mocked<TagManager>;\n  let mockCoverageReporter: jest.Mocked<CoverageReportGenerator>;\n  \n  beforeEach(() => {\n    // Clear all mocks\n    jest.clearAllMocks();\n    \n    // Setup getConfig mock\n    (getConfig as jest.Mock).mockReturnValue({\n      rootDir: 'src/components',\n      browserstack: {\n        username: 'test-user',\n        apiKey: 'test-key'\n      },\n      coverage: {\n        output: 'test-coverage'\n      }\n    });\n    \n    // Create the manager\n    manager = new ComponentHierarchyManager();\n    \n    // Get mock instances\n    mockScanner = ComponentHierarchyScanner.prototype as jest.Mocked<ComponentHierarchyScanner>;\n    mockHashTracker = HashTrackingManager.prototype as jest.Mocked<HashTrackingManager>;\n    mockBrowserStackManager = BrowserStackManager.prototype as jest.Mocked<BrowserStackManager>;\n    mockTagManager = TagManager.prototype as jest.Mocked<TagManager>;\n    mockCoverageReporter = CoverageReportGenerator.prototype as jest.Mocked<CoverageReportGenerator>;\n  });\n  \n  describe('scanHierarchy', () => {\n    it('should scan the component directory and process the hierarchy', async () => {\n      // Arrange\n      const mockHierarchy = new Map<string, ComponentNode>([\n        ['Button', { \n          name: 'Button', \n          path: 'src/components/Button.tsx', \n          children: ['Icon'],\n          testIds: ['button_primary', 'button_secondary']\n        }],\n        ['Icon', { \n          name: 'Icon', \n          path: 'src/components/Icon.tsx', \n          children: [],\n          testIds: ['icon_default']\n        }]\n      ]);\n      \n      mockScanner.scanDirectory.mockResolvedValue(mockHierarchy);\n      mockTagManager.loadTags.mockResolvedValue(undefined);\n      mockTagManager.registerTag.mockResolvedValue(undefined);\n      mockBrowserStackManager.syncTestResults.mockResolvedValue(undefined);\n      mockCoverageReporter.generateReport.mockResolvedValue(undefined);\n      mockHashTracker.trackFile.mockResolvedValue(undefined);\n      \n      // Act\n      const result = await manager.scanHierarchy();\n      \n      // Assert\n      expect(mockScanner.scanDirectory).toHaveBeenCalledWith('src/components');\n      expect(mockHashTracker.trackFile).toHaveBeenCalledTimes(2);\n      expect(mockHashTracker.trackFile).toHaveBeenCalledWith('src/components/Button.tsx', ['Button']);\n      expect(mockHashTracker.trackFile).toHaveBeenCalledWith('src/components/Icon.tsx', ['Icon']);\n      expect(mockTagManager.loadTags).toHaveBeenCalled();\n      expect(mockTagManager.registerTag).toHaveBeenCalledTimes(2);\n      expect(mockBrowserStackManager.syncTestResults).toHaveBeenCalled();\n      expect(mockCoverageReporter.generateReport).toHaveBeenCalled();\n      expect(result).toBe(mockHierarchy);\n    });\n  });\n  \n  describe('trackChanges', () => {\n    it('should be implemented in the future', async () => {\n      // This is a placeholder test for a method to be implemented\n      // await manager.trackChanges();\n      // No assertions since method is empty, but it should resolve\n    });\n  });\n  \n  describe('validateTags', () => {\n    it('should be implemented in the future', async () => {\n      // This is a placeholder test for a method to be implemented\n      // await manager.validateTags();\n      // No assertions since method is empty, but it should resolve\n    });\n  });\n}); "],
  "mappings": ";AAAA,+BAAyD;AACzD,uCAA0C;AAC1C,iCAAoC;AACpC,iCAAoC;AACpC,wBAA2B;AAC3B,sBAAwC;AACxC,oBAA0B;AAG1B,KAAK,KAAK,0CAA0C;AACpD,KAAK,KAAK,wBAAwB;AAClC,KAAK,KAAK,gDAAgD;AAC1D,KAAK,KAAK,iCAAiC;AAC3C,KAAK,KAAK,sCAAsC;AAChD,KAAK,KAAK,sBAAsB;AAEhC,SAAS,6BAA6B,MAAM;AAC1C,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,aAAW,MAAM;AAEf,SAAK,cAAc;AAGnB,IAAC,wBAAwB,gBAAgB;AAAA,MACvC,SAAS;AAAA,MACT,cAAc;AAAA,QACZ,UAAU;AAAA,QACV,QAAQ;AAAA,MACV;AAAA,MACA,UAAU;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAGD,cAAU,IAAI,mDAA0B;AAGxC,kBAAc,2DAA0B;AACxC,sBAAkB,+CAAoB;AACtC,8BAA0B,+CAAoB;AAC9C,qBAAiB,6BAAW;AAC5B,2BAAuB,wCAAwB;AAAA,EACjD,CAAC;AAED,WAAS,iBAAiB,MAAM;AAC9B,OAAG,iEAAiE,YAAY;AAE9E,YAAM,gBAAgB,oBAAI,IAA2B;AAAA,QACnD,CAAC,UAAU;AAAA,UACT,MAAM;AAAA,UACN,MAAM;AAAA,UACN,UAAU,CAAC,MAAM;AAAA,UACjB,SAAS,CAAC,kBAAkB,kBAAkB;AAAA,QAChD,CAAC;AAAA,QACD,CAAC,QAAQ;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,UAAU,CAAC;AAAA,UACX,SAAS,CAAC,cAAc;AAAA,QAC1B,CAAC;AAAA,MACH,CAAC;AAED,kBAAY,cAAc,kBAAkB,aAAa;AACzD,qBAAe,SAAS,kBAAkB,MAAS;AACnD,qBAAe,YAAY,kBAAkB,MAAS;AACtD,8BAAwB,gBAAgB,kBAAkB,MAAS;AACnE,2BAAqB,eAAe,kBAAkB,MAAS;AAC/D,sBAAgB,UAAU,kBAAkB,MAAS;AAGrD,YAAM,SAAS,MAAM,QAAQ,cAAc;AAG3C,aAAO,YAAY,aAAa,EAAE,qBAAqB,gBAAgB;AACvE,aAAO,gBAAgB,SAAS,EAAE,sBAAsB,CAAC;AACzD,aAAO,gBAAgB,SAAS,EAAE,qBAAqB,6BAA6B,CAAC,QAAQ,CAAC;AAC9F,aAAO,gBAAgB,SAAS,EAAE,qBAAqB,2BAA2B,CAAC,MAAM,CAAC;AAC1F,aAAO,eAAe,QAAQ,EAAE,iBAAiB;AACjD,aAAO,eAAe,WAAW,EAAE,sBAAsB,CAAC;AAC1D,aAAO,wBAAwB,eAAe,EAAE,iBAAiB;AACjE,aAAO,qBAAqB,cAAc,EAAE,iBAAiB;AAC7D,aAAO,MAAM,EAAE,KAAK,aAAa;AAAA,IACnC,CAAC;AAAA,EACH,CAAC;AAED,WAAS,gBAAgB,MAAM;AAC7B,OAAG,uCAAuC,YAAY;AAAA,IAItD,CAAC;AAAA,EACH,CAAC;AAED,WAAS,gBAAgB,MAAM;AAC7B,OAAG,uCAAuC,YAAY;AAAA,IAItD,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
