{
  "version": 3,
  "sources": ["../../../src/component-management/managers/component-manager.ts"],
  "sourcesContent": ["import { ComponentHierarchyScanner } from '../scanners/ComponentHierarchyScanner';\nimport { HashTrackingManager } from './HashTrackingManager';\nimport { TagManager } from '../../shared/tags/TagManager';\nimport { getConfig } from '../../core/config';\n\nexport interface ComponentManager {\n  scanHierarchy(): Promise<Map<string, ComponentNode>>;\n}\n\nexport interface ComponentNode {\n  path: string;\n  children: string[];\n  testIds: string[];\n  name: string;\n}\n\nexport class ComponentHierarchyManager implements ComponentManager {\n  private scanner: ComponentHierarchyScanner;\n  private hashTracker: HashTrackingManager;\n  private tagManager: TagManager;\n  private config: any;\n\n  constructor() {\n    console.log('Initializing ComponentHierarchyManager');\n    const config = getConfig('manager', {\n      required: false,\n      configPath: process.env.MANAGER_CONFIG_PATH\n    });\n    \n    // Ensure browserStack config exists with default values\n    const browserStackConfig = config.browserStack || { enabled: false };\n    \n    this.scanner = new ComponentHierarchyScanner();\n    this.hashTracker = new HashTrackingManager(config.tracking?.hashStoreFile || '.hash-store.json');\n    this.tagManager = new TagManager(config.tracking?.tagStoreFile || '.tag-store.json');\n    this.config = config || {};\n  }\n\n  async scanHierarchy(): Promise<Map<string, ComponentNode>> {\n    console.log('Scanning hierarchy');\n    // Use a default rootDir if not specified in config\n    const rootDir = this.config?.rootDir || 'src/components';\n    console.log('Scanning directory:', rootDir);\n    const hierarchy = await this.scanner.scanDirectory(rootDir);\n    await this.trackComponentFiles(hierarchy);\n    await this.processHierarchy(hierarchy);\n    return hierarchy;\n  }\n\n  private async trackComponentFiles(hierarchy: Map<string, any>): Promise<void> {\n    console.log('Tracking component files:', hierarchy);\n    for (const [name, component] of hierarchy) {\n      await this.hashTracker.trackFile(component.path, [name]);\n    }\n  }\n\n  private async processHierarchy(hierarchy: Map<string, ComponentNode>): Promise<void> {\n    console.log('Processing hierarchy:', hierarchy);\n    await this.tagManager.loadTags();\n\n\n    for (const [name, component] of hierarchy) {\n      await this.tagManager.registerTag({\n        name: `@root_${name.toLowerCase()}`,\n        components: [component.path],\n        relationships: component.children.map((childName: string) => \n          `@root_${childName.toLowerCase()}`\n        ),\n        category: 'component',\n        metadata: {\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }\n      });\n    }\n  }\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAA0C;AAC1C,iCAAoC;AACpC,wBAA2B;AAC3B,oBAA0B;AAanB,MAAM,0BAAsD;AAAA,EAMjE,cAAc;AAtBhB;AAuBI,YAAQ,IAAI,wCAAwC;AACpD,UAAM,aAAS,yBAAU,WAAW;AAAA,MAClC,UAAU;AAAA,MACV,YAAY,QAAQ,IAAI;AAAA,IAC1B,CAAC;AAGD,UAAM,qBAAqB,OAAO,gBAAgB,EAAE,SAAS,MAAM;AAEnE,SAAK,UAAU,IAAI,2DAA0B;AAC7C,SAAK,cAAc,IAAI,iDAAoB,YAAO,aAAP,mBAAiB,kBAAiB,kBAAkB;AAC/F,SAAK,aAAa,IAAI,+BAAW,YAAO,aAAP,mBAAiB,iBAAgB,iBAAiB;AACnF,SAAK,SAAS,UAAU,CAAC;AAAA,EAC3B;AAAA,EAEA,MAAM,gBAAqD;AAtC7D;AAuCI,YAAQ,IAAI,oBAAoB;AAEhC,UAAM,YAAU,UAAK,WAAL,mBAAa,YAAW;AACxC,YAAQ,IAAI,uBAAuB,OAAO;AAC1C,UAAM,YAAY,MAAM,KAAK,QAAQ,cAAc,OAAO;AAC1D,UAAM,KAAK,oBAAoB,SAAS;AACxC,UAAM,KAAK,iBAAiB,SAAS;AACrC,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,oBAAoB,WAA4C;AAC5E,YAAQ,IAAI,6BAA6B,SAAS;AAClD,eAAW,CAAC,MAAM,SAAS,KAAK,WAAW;AACzC,YAAM,KAAK,YAAY,UAAU,UAAU,MAAM,CAAC,IAAI,CAAC;AAAA,IACzD;AAAA,EACF;AAAA,EAEA,MAAc,iBAAiB,WAAsD;AACnF,YAAQ,IAAI,yBAAyB,SAAS;AAC9C,UAAM,KAAK,WAAW,SAAS;AAG/B,eAAW,CAAC,MAAM,SAAS,KAAK,WAAW;AACzC,YAAM,KAAK,WAAW,YAAY;AAAA,QAChC,MAAM,SAAS,KAAK,YAAY,CAAC;AAAA,QACjC,YAAY,CAAC,UAAU,IAAI;AAAA,QAC3B,eAAe,UAAU,SAAS;AAAA,UAAI,CAAC,cACrC,SAAS,UAAU,YAAY,CAAC;AAAA,QAClC;AAAA,QACA,UAAU;AAAA,QACV,UAAU;AAAA,UACR,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,UAClC,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,QACpC;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
