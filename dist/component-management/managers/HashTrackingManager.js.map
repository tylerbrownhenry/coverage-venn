{
  "version": 3,
  "sources": ["../../../src/component-management/managers/HashTrackingManager.ts"],
  "sourcesContent": ["import { FileHasher } from '../../shared/utils/FileHasher';\nimport * as path from 'path';\nimport * as fs from 'fs/promises';\n\ninterface FileHash {\n  path: string;\n  hash: string;\n  lastUpdated: Date;\n  relatedComponents: string[];\n}\n\nexport class HashTrackingManager {\n  private hashStore: Map<string, FileHash> = new Map();\n  private storePath: string;\n\n  constructor(storePath: string = '.hash-store.json') {\n    this.storePath = storePath;\n  }\n\n  async trackFile(filePath: string, relatedComponents: string[] = []): Promise<FileHash> {\n    const hash = await FileHasher.hashFile(filePath);\n    const fileHash: FileHash = {\n      path: filePath,\n      hash,\n      lastUpdated: new Date(),\n      relatedComponents\n    };\n\n    this.hashStore.set(filePath, fileHash);\n    await this.persistStore();\n    return fileHash;\n  }\n\n  async hasFileChanged(filePath: string): Promise<boolean> {\n    const currentHash = await FileHasher.hashFile(filePath);\n    const storedHash = this.hashStore.get(filePath);\n    return !storedHash || storedHash.hash !== currentHash;\n  }\n\n  async getChangedFiles(): Promise<FileHash[]> {\n    const changedFiles: FileHash[] = [];\n    \n    for (const [filePath, stored] of this.hashStore) {\n      if (await this.hasFileChanged(filePath)) {\n        changedFiles.push(stored);\n      }\n    }\n\n    return changedFiles;\n  }\n\n  private async persistStore(): Promise<void> {\n    const storeData = JSON.stringify(Array.from(this.hashStore.entries()), null, 2);\n    await fs.writeFile(this.storePath, storeData);\n  }\n\n  private async loadStore(): Promise<void> {\n    try {\n      const data = await fs.readFile(this.storePath, 'utf-8');\n      this.hashStore = new Map(JSON.parse(data));\n    } catch (error) {\n      this.hashStore = new Map();\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA2B;AAE3B,SAAoB;AASb,MAAM,oBAAoB;AAAA,EAI/B,YAAY,YAAoB,oBAAoB;AAHpD,SAAQ,YAAmC,oBAAI,IAAI;AAIjD,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,MAAM,UAAU,UAAkB,oBAA8B,CAAC,GAAsB;AACrF,UAAM,OAAO,MAAM,6BAAW,SAAS,QAAQ;AAC/C,UAAM,WAAqB;AAAA,MACzB,MAAM;AAAA,MACN;AAAA,MACA,aAAa,oBAAI,KAAK;AAAA,MACtB;AAAA,IACF;AAEA,SAAK,UAAU,IAAI,UAAU,QAAQ;AACrC,UAAM,KAAK,aAAa;AACxB,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,eAAe,UAAoC;AACvD,UAAM,cAAc,MAAM,6BAAW,SAAS,QAAQ;AACtD,UAAM,aAAa,KAAK,UAAU,IAAI,QAAQ;AAC9C,WAAO,CAAC,cAAc,WAAW,SAAS;AAAA,EAC5C;AAAA,EAEA,MAAM,kBAAuC;AAC3C,UAAM,eAA2B,CAAC;AAElC,eAAW,CAAC,UAAU,MAAM,KAAK,KAAK,WAAW;AAC/C,UAAI,MAAM,KAAK,eAAe,QAAQ,GAAG;AACvC,qBAAa,KAAK,MAAM;AAAA,MAC1B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,eAA8B;AAC1C,UAAM,YAAY,KAAK,UAAU,MAAM,KAAK,KAAK,UAAU,QAAQ,CAAC,GAAG,MAAM,CAAC;AAC9E,UAAM,GAAG,UAAU,KAAK,WAAW,SAAS;AAAA,EAC9C;AAAA,EAEA,MAAc,YAA2B;AACvC,QAAI;AACF,YAAM,OAAO,MAAM,GAAG,SAAS,KAAK,WAAW,OAAO;AACtD,WAAK,YAAY,IAAI,IAAI,KAAK,MAAM,IAAI,CAAC;AAAA,IAC3C,SAAS,OAAO;AACd,WAAK,YAAY,oBAAI,IAAI;AAAA,IAC3B;AAAA,EACF;AACF;",
  "names": []
}
