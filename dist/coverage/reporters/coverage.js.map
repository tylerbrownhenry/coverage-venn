{
  "version": 3,
  "sources": ["../../../src/coverage/reporters/coverage.ts"],
  "sourcesContent": ["import { ComponentCoverage } from '../../types';\n\nexport interface CoverageReport {\n  components: ComponentCoverage[];\n  summary: {\n    total: number;\n    covered: number;\n    percentage: number;\n  };\n  timestamp: string;\n}\n\nexport class CoverageReportGenerator {\n  private outputPath: string;\n\n  constructor(outputPath: string = './coverage-report.json') {\n    this.outputPath = outputPath;\n  }\n\n  async generateReport(components: ComponentCoverage[]): Promise<CoverageReport> {\n    const covered = components.filter(c => \n      c.coverage.unit > 0 || \n      c.coverage.e2e > 0 || \n      c.coverage.visual > 0 || \n      c.coverage.runtime > 0\n    ).length;\n\n    const report: CoverageReport = {\n      components,\n      summary: {\n        total: components.length,\n        covered,\n        percentage: (covered / components.length) * 100\n      },\n      timestamp: new Date().toISOString()\n    };\n\n    // In a real implementation, we would write to this.outputPath\n    console.log(`Generated coverage report with ${covered}/${components.length} components covered`);\n\n    return report;\n  }\n\n  async saveReport(report: CoverageReport): Promise<void> {\n    // Implementation would write to this.outputPath\n    console.log('Saved coverage report to:', this.outputPath);\n  }\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,MAAM,wBAAwB;AAAA,EAGnC,YAAY,aAAqB,0BAA0B;AACzD,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,MAAM,eAAe,YAA0D;AAC7E,UAAM,UAAU,WAAW;AAAA,MAAO,OAChC,EAAE,SAAS,OAAO,KAClB,EAAE,SAAS,MAAM,KACjB,EAAE,SAAS,SAAS,KACpB,EAAE,SAAS,UAAU;AAAA,IACvB,EAAE;AAEF,UAAM,SAAyB;AAAA,MAC7B;AAAA,MACA,SAAS;AAAA,QACP,OAAO,WAAW;AAAA,QAClB;AAAA,QACA,YAAa,UAAU,WAAW,SAAU;AAAA,MAC9C;AAAA,MACA,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IACpC;AAGA,YAAQ,IAAI,kCAAkC,OAAO,IAAI,WAAW,MAAM,qBAAqB;AAE/F,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,WAAW,QAAuC;AAEtD,YAAQ,IAAI,6BAA6B,KAAK,UAAU;AAAA,EAC1D;AACF;",
  "names": []
}
