{
  "version": 3,
  "sources": ["../../src/core/config.ts"],
  "sourcesContent": ["import * as path from 'path';\n\ninterface ConfigOptions {\n  configPath?: string;\n  required?: boolean;\n}\n\nexport function getConfig(name: string, options: ConfigOptions = {}): any {\n  const configPaths = [\n    options.configPath,\n    process.env[`${name.toUpperCase()}_CONFIG_PATH`],\n    path.join(process.cwd(), `config/${name}.config.js`),\n    path.join(process.cwd(), `.${name}rc.js`),\n    path.join(process.cwd(), `.${name}rc.json`)\n  ].filter((p): p is string => Boolean(p));\n\n  for (const configPath of configPaths) {\n    try {\n      console.log('Trying config path:', configPath);\n      const resolvedPath = require.resolve(configPath);\n      const config = require(resolvedPath);\n      console.log('Loaded config from:', resolvedPath);\n      return config;\n    } catch (error) {\n      console.log('Failed to load config from:', configPath);\n      continue;\n    }\n  }\n\n  if (options.required) {\n    throw new Error(`Could not find config for ${name} in: ${configPaths.join(', ')}`);\n  }\n\n  return {};\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsB;AAOf,SAAS,UAAU,MAAc,UAAyB,CAAC,GAAQ;AACxE,QAAM,cAAc;AAAA,IAClB,QAAQ;AAAA,IACR,QAAQ,IAAI,GAAG,KAAK,YAAY,CAAC,cAAc;AAAA,IAC/C,KAAK,KAAK,QAAQ,IAAI,GAAG,UAAU,IAAI,YAAY;AAAA,IACnD,KAAK,KAAK,QAAQ,IAAI,GAAG,IAAI,IAAI,OAAO;AAAA,IACxC,KAAK,KAAK,QAAQ,IAAI,GAAG,IAAI,IAAI,SAAS;AAAA,EAC5C,EAAE,OAAO,CAAC,MAAmB,QAAQ,CAAC,CAAC;AAEvC,aAAW,cAAc,aAAa;AACpC,QAAI;AACF,cAAQ,IAAI,uBAAuB,UAAU;AAC7C,YAAM,eAAe,QAAQ,QAAQ,UAAU;AAC/C,YAAM,SAAS,QAAQ,YAAY;AACnC,cAAQ,IAAI,uBAAuB,YAAY;AAC/C,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,IAAI,+BAA+B,UAAU;AACrD;AAAA,IACF;AAAA,EACF;AAEA,MAAI,QAAQ,UAAU;AACpB,UAAM,IAAI,MAAM,6BAA6B,IAAI,QAAQ,YAAY,KAAK,IAAI,CAAC,EAAE;AAAA,EACnF;AAEA,SAAO,CAAC;AACV;",
  "names": []
}
