{
  "version": 3,
  "sources": ["../src/cli.ts"],
  "sourcesContent": ["#!/usr/bin/env node\nimport { Command } from 'commander';\nimport { ComponentHierarchyManager } from './component-management/managers/component-manager';\nimport { CoverageReportGenerator } from './coverage/reporters/coverage';\nimport path from 'path';\n\nconst program = new Command();\n\nprogram\n  .name('coverage-venn')\n  .description('Component coverage analysis and visualization tool')\n  .version('1.0.0');\n\nprogram\n  .command('scan')\n  .description('Scan a directory for component coverage analysis')\n  .argument('<directory>', 'Directory to scan')\n  .option('-o, --output <path>', 'Output path for coverage report', './coverage-report.json')\n  .option('-c, --config <path>', 'Path to config file')\n  .action(async (directory: string, options) => {\n    try {\n      // Set environment variables if config provided\n      if (options.config) {\n        process.env.MANAGER_CONFIG_PATH = options.config;\n      }\n\n      console.log(`Scanning directory: ${directory}`);\n      \n      // Initialize managers\n      const hierarchyManager = new ComponentHierarchyManager();\n      const reportGenerator = new CoverageReportGenerator(options.output);\n\n      // Scan hierarchy\n      const hierarchy = await hierarchyManager.scanHierarchy();\n      \n      // Generate coverage data\n      const coverageData = Array.from(hierarchy.values()).map(component => ({\n        path: component.path,\n        coverage: {\n          unit: 0, // These would be populated by actual coverage data\n          e2e: 0,\n          visual: 0,\n          runtime: 0\n        },\n        testIds: component.testIds,\n        tags: [] // Would be populated by tag manager\n      }));\n\n      // Generate and save report\n      const report = await reportGenerator.generateReport(coverageData);\n      await reportGenerator.saveReport(report);\n\n      console.log('Coverage analysis complete!');\n      console.log(`Report saved to: ${options.output}`);\n      console.log(`Total components: ${report.summary.total}`);\n      console.log(`Coverage: ${report.summary.percentage.toFixed(2)}%`);\n    } catch (error) {\n      console.error('Error during scan:', error);\n      process.exit(1);\n    }\n  });\n\nprogram.parse(); "],
  "mappings": ";;AACA,uBAAwB;AACxB,+BAA0C;AAC1C,sBAAwC;AAGxC,MAAM,UAAU,IAAI,yBAAQ;AAE5B,QACG,KAAK,eAAe,EACpB,YAAY,oDAAoD,EAChE,QAAQ,OAAO;AAElB,QACG,QAAQ,MAAM,EACd,YAAY,kDAAkD,EAC9D,SAAS,eAAe,mBAAmB,EAC3C,OAAO,uBAAuB,mCAAmC,wBAAwB,EACzF,OAAO,uBAAuB,qBAAqB,EACnD,OAAO,OAAO,WAAmB,YAAY;AAC5C,MAAI;AAEF,QAAI,QAAQ,QAAQ;AAClB,cAAQ,IAAI,sBAAsB,QAAQ;AAAA,IAC5C;AAEA,YAAQ,IAAI,uBAAuB,SAAS,EAAE;AAG9C,UAAM,mBAAmB,IAAI,mDAA0B;AACvD,UAAM,kBAAkB,IAAI,wCAAwB,QAAQ,MAAM;AAGlE,UAAM,YAAY,MAAM,iBAAiB,cAAc;AAGvD,UAAM,eAAe,MAAM,KAAK,UAAU,OAAO,CAAC,EAAE,IAAI,gBAAc;AAAA,MACpE,MAAM,UAAU;AAAA,MAChB,UAAU;AAAA,QACR,MAAM;AAAA;AAAA,QACN,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,SAAS;AAAA,MACX;AAAA,MACA,SAAS,UAAU;AAAA,MACnB,MAAM,CAAC;AAAA;AAAA,IACT,EAAE;AAGF,UAAM,SAAS,MAAM,gBAAgB,eAAe,YAAY;AAChE,UAAM,gBAAgB,WAAW,MAAM;AAEvC,YAAQ,IAAI,6BAA6B;AACzC,YAAQ,IAAI,oBAAoB,QAAQ,MAAM,EAAE;AAChD,YAAQ,IAAI,qBAAqB,OAAO,QAAQ,KAAK,EAAE;AACvD,YAAQ,IAAI,aAAa,OAAO,QAAQ,WAAW,QAAQ,CAAC,CAAC,GAAG;AAAA,EAClE,SAAS,OAAO;AACd,YAAQ,MAAM,sBAAsB,KAAK;AACzC,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF,CAAC;AAEH,QAAQ,MAAM;",
  "names": []
}
